 Q 1.	Create table DEPT with the following structure:-
DEPTNO			int(2)
DNAME			varchar(15)
LOC				varchar(10)

Insert the following rows into the DEPT table:-
10	ACCOUNTING	NEW YORK
20	RESEARCH		DALLAS
30	SALES		CHICAGO
40	OPERATIONS	BOSTON


ANS :- create table DEPT (DEPTNO int(2), DNAME varchar(15), LOC varchar(10));

 insert into DEPT(DEPTNO,DNAME,LOC) values
    -> (10,'ACCOUNTING','NEW YORK'),
    -> (20,'RESEARCH','DALLAS'),
    -> (30,'SALES','CHICAGO'),
    -> (40,'OPERATIONS','BOSTON');

 SELECT * FROM DEPT;
+--------+------------+----------+
| DEPTNO | DNAME      | LOC      |
+--------+------------+----------+
|     10 | ACCOUNTING | NEW YORK |
|     20 | RESEARCH   | DALLAS   |
|     30 | SALES      | CHICAGO  |
|     40 | OPERATIONS | BOSTON   |
+--------+------------+----------+
-------------------------------------------------------------------------------------\2.	Create table EMP with the following structure:-
 CREATE TABLE EMP (EMPN0 int(4), ENAME varchar(10), JOB varchar(9), HIREDATE date, SAL float(7,2),COMM float (7,2),DEPTNO int(2));

INSERT INTO EMP(EMPNO,ENAME, JOB, HIREDATE, SAL, COMM,DEPTNO) VALUES
    -> (7839, 'KING', 'MANAGER', '1991-11-17', 5000, NULL, 10),
    -> (7698, 'BLAKE', 'CLERK', '1981-05-01', 2850, NULL, 30),
    -> (7782, 'CLARK', 'MANAGER', '1981-06-09', 2450, NULL, 10),
    -> (7566, 'JONES', 'CLERK', '1981-04-02', 2975, NULL, 20),
    -> (7654, 'MARTIN', 'SALESMAN', '1981-09-28', 1250, 1400, 30),
    -> (7499, 'ALLEN', 'SALESMAN', '1981-02-20', 1600, 300, 30);

SELECT * FROM EMP;
+-------+--------+----------+------------+---------+---------+--------+
| EMPNO | ENAME  | JOB      | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+--------+----------+------------+---------+---------+--------+
|  7839 | KING   | MANAGER  | 1991-11-17 | 5000.00 |    NULL |     10 |
|  7698 | BLAKE  | CLERK    | 1981-05-01 | 2850.00 |    NULL |     30 |
|  7782 | CLARK  | MANAGER  | 1981-06-09 | 2450.00 |    NULL |     10 |
|  7566 | JONES  | CLERK    | 1981-04-02 | 2975.00 |    NULL |     20 |
|  7654 | MARTIN | SALESMAN | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7499 | ALLEN  | SALESMAN | 1981-02-20 | 1600.00 |  300.00 |     30 |
+-------+--------+----------+------------+---------+---------+--------+

--------------------------------------------------------------------------------------
Write SELECT statements to achieve the following:-

use exam;
/*3.	Display all the employees where SAL between 2500 and 5000 (inclusive of both).*/
select * from emp;
select * from dept;

select * from emp 
where sal between 2500 and 5000;


/*4.	Display all the ENAMEs in descending order of ENAME.*/
select ename from emp order by 1 desc ;


/*5.	Display all the JOBs in lowercase.*/
 select lower(job) from emp;
 
 
 
 
/* 6.	Display the ENAMEs and the lengths of the ENAMEs.*/
select ename, length(ename) "length of enames " from emp;



/*7.	Display the DEPTNO and the count of employees who belong to that DEPTNO */
select deptno , count(*) from emp 
group by deptno;



/*8.	Display the DNAMEs and the ENAMEs who belong to that DNAME.*/
select ename ,dname from emp,dept
where(emp.deptno = dept.deptno);




/*9.	Display the position at which the string ‘AR’ occurs in the ename.*/

select ename ,instr(ename , 'AR') from emp;


/*10.	Display the HRA for each employee given that HRA is 20% of SAL.*/
select empno "Employee No" , ename "Employee Name", sal "SALARY" , SAL*0.2 "HRA" from emp ;

------------------------------------------------------------------------------------
1.	Write a stored procedure by the name of PROC1 that accepts two varchar strings as parameters. Your procedure should then determine if the first varchar string exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 = ‘CDAC, then string1 exists inside string2.  The stored procedure should insert the appropriate message into a suitable TEMPP output table. Calling program for the stored procedure need not be written.



USE exam;
delimiter //
 create procedure PROC1(str1 varchar(20), str2 varchar(20))
    begin
    declare a int default 0;
    set a = instr(str2,str1);
     if (a = 0) then
    insert into TEMPP (i , sol) values (0, 'String2 is not part of String 1');
    else insert into TEMPP (i, sol) values (1,'String2 is a part of String 1');
  end if;
    end;//
    delimiter ;
    select * from tempp;
    call PROC1('DAC','CDAC');
    select * from TEMPP;

------------------------------------------------------------------------------------
2.	Create a stored function by the name of FUNC1 to take three parameters, the sides of a triangle. The function should return a Boolean value:- TRUE if the triangle is valid, FALSE otherwise. A triangle is valid if the length of each side is less than the sum of the lengths of the other two sides. Check if the dimensions entered can form a valid triangle. Calling program for the stored function need not be written.




use exam;
 delimiter //
 create function FUNC1(a float , b float , c float)
 returns boolean
 deterministic
 begin
 if (a + b > c) and (a + c > b) and (b +c > a) then
 return true;
 else
 return false;
 end if;
 end;//
 delimiter ;
 select FUNC1(10,20,30);
 select FUNC1(60,70,50);
 SELECT * FROM FUNC1 ;
